/*
 * -------------------------------------------------
 * signatureAssociations.nf Nextflow config file
 * written by Andy Everall
 * -------------------------------------------------
 */

// pipeline information
manifest {
    author = 'Andy Everall'
    description = 'Run Signature Associations pipeline'
    mainScript = 'main.nf'
    name = 'prsSignatures.nf'
    nextflowVersion = '21.04.3'
    version = '0.0.1'
}

// workDir='/re_scratch/re_gecip/cancer_pan/aeverall/prs_signatures/prsSignatures/work'
// tempDir='/re_scratch/re_gecip/cancer_pan/aeverall/prs_signatures/prsSignatures/temp'

// environmental variables
// env {
// }

// default global parameters
params {
    // options: generic
    help = false
    executor = 'lsf'

    // options: LSF
    projectName = 're_gecip_cancer_pan'

    // options: test run
    max_signatures = 1000

    // options: How to perform resampling - dCRT or bootstrap
    resampling_method = 'dCRT'
    power_analysis = true
}

// default process parameters
process {
    executor = params.executor
    clusterOptions = "-P ${params.projectName}" // should not specify -R "span[hosts=1]", as this is automatically included when cpus > 1
    // errorStrategy = 'retry' // maxRetries = 3
    module = 'lang/R/4.1.0-foss-2019b'
    beforeScript = { task.attempt <= 1 ? 'sleep 1' : 'sleep 30' } // negate delay in file availability
    withLabel: 'regular|standard' {
          executor = 'local'
          memory = { task.attempt <= 1 ? '16 GB' : '32 GB' }
          queue = 'short'
    }
    withLabel: short_job {
        errorStrategy = { task.attempt <= 2 ? 'retry' : 'ignore' }
        maxRetries = 4
        time = { task.attempt <= 1 ? '4h' : '24h' }
        // cpus = { task.attempt <= 1 ? '2' : '4' }
        memory = { task.attempt <= 1 ? '16 GB' : '32 GB' }
        queue = { task.attempt <= 1 ? 'short' : 'medium' }
    }
}

// default job submission parameters
executor {
    submitRateLimit = '5 sec'
    $lsf { queueSize = 200 }
    $local { queueSize = 50 }
}

timeline {
  enabled=true
}

report {
  enabled=true
}
